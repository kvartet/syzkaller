include <lib_mem.h>
include <lib_def.h>

Mem_Clr(pmem ptr[in, void], size CPU_SIZE_T)
Mem_Set(pmem ptr[in, void], data_val int8, size CPU_SIZE_T)
Mem_Copy(pdest ptr[in, void], psrc ptr[in, void], size CPU_SIZE_T)
Mem_Move(pdest ptr[in, void], psrc ptr[in, void], size CPU_SIZE_T)
Mem_Cmp(p1_mem ptr[in, void], p2_mem ptr[in, void], size CPU_SIZE_T) CPU_BOOLEAN
Mem_Init()
Mem_SegCreate(p_name ptr[in, CPU_CHAR], p_seg ptr[out, MEM_SEG], seg_base_addr CPU_ADDR, size CPU_SIZE_T, padding_align CPU_SIZE_T, p_err ptr[out, const[LIB_MEM_ERR_NONE, int16]])
Mem_SegClr(p_seg ptr[in, MEM_SEG], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]])
Mem_SegAlloc(p_name ptr[in, CPU_CHAR], p_seg ptr[in, MEM_SEG], size CPU_SIZE_T, perr ptr[out, const[LIB_MEM_ERR_NONE, int16]]) ptr[in, void]
Mem_SegAllocExt(p_name ptr[in, CPU_CHAR], p_seg ptr[in, MEM_SEG], size CPU_SIZE_T, align CPU_SIZE_T, p_bytes_reqd ptr[in, CPU_SIZE_T], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]]) ptr[in, void]
Mem_SegAllocHW(p_name ptr[in, CPU_CHAR], p_seg ptr[in, MEM_SEG], size CPU_SIZE_T, align CPU_SIZE_T, p_bytes_reqd ptr[in, CPU_SIZE_T], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]]) ptr[in, void]
Mem_SegRemSizeGet(p_seg ptr[in, MEM_SEG], align CPU_SIZE_T, p_seg_info ptr[in, MEM_SEG_INFO], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]]) CPU_SIZE_T
Mem_PoolCreate(p_pool ptr[out, MEM_POOL], p_mem_base ptr[in, void], mem_size CPU_SIZE_T, blk_nbr MEM_POOL_BLK_QTY, blk_size CPU_SIZE_T, blk_align CPU_SIZE_T, p_bytes_reqd ptr[in, CPU_SIZE_T], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]])
Mem_PoolClr(p_pool ptr[in, MEM_POOL], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]])
Mem_PoolBlkGet(p_pool ptr[in, MEM_POOL], size CPU_SIZE_T, perr ptr[out, const[LIB_MEM_ERR_NONE, int16]]) ptr[in, void]
Mem_PoolBlkFree(p_pool ptr[in, MEM_POOL], p_blk ptr[in, void], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]])
Mem_PoolBlkGetNbrAvail(p_pool ptr[in, MEM_POOL], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]]) MEM_POOL_BLK_QTY
Mem_DynPoolCreate(p_name ptr[in, CPU_CHAR], p_pool ptr[out, MEM_DYN_POOL], p_seg ptr[in, MEM_SEG], blk_size CPU_SIZE_T, blk_align CPU_SIZE_T, blk_qty_init CPU_SIZE_T, blk_qty_max CPU_SIZE_T, perr ptr[out, const[LIB_MEM_ERR_NONE, int16]])
Mem_DynPoolCreateHW(p_name ptr[in, CPU_CHAR], p_pool ptr[out, MEM_DYN_POOL], p_seg ptr[in, MEM_SEG], blk_size CPU_SIZE_T, blk_align CPU_SIZE_T, blk_qty_init CPU_SIZE_T, blk_qty_max CPU_SIZE_T, perr ptr[out, const[LIB_MEM_ERR_NONE, int16]])
Mem_DynPoolBlkGet(p_pool ptr[in, MEM_DYN_POOL], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]]) ptr[in, void]
Mem_DynPoolBlkFree(p_pool ptr[in, MEM_DYN_POOL], p_blk ptr[in, void], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]])
Mem_DynPoolBlkNbrAvailGet(p_pool ptr[in, MEM_DYN_POOL], perr ptr[out, const[LIB_MEM_ERR_NONE, int16]]) CPU_SIZE_T
# Mem_HeapAlloc(size CPU_SIZE_T, align CPU_SIZE_T, p_bytes_reqd ptr[in, CPU_SIZE_T], p_err ptr[out, const[LIB_MEM_ERR_NONE, int16]]) ptr[in, void]
# Mem_HeapGetSizeRem(align CPU_SIZE_T, p_err ptr[out, const[LIB_MEM_ERR_NONE, int16]]) CPU_SIZE_T


type CPU_BOOLEAN        int8
type CPU_SIZE_T         int32
type MEM_POOL_BLK_QTY   int32


MEM_SEG {
    AddrBase        CPU_ADDR
    AddrEnd         CPU_ADDR
    AddrNext        CPU_ADDR
    NextPtr         ptr[in, MEM_SEG]
    PaddingAlign    CPU_SIZE_T
}

MEM_POOL {
    PoolAddrStart   ptr[in, void]
    PoolAddrEnd     ptr[in, void]
    BlkNbr          MEM_POOL_BLK_QTY
    BlkSize         CPU_SIZE_T
    BlkFreeTbl      ptr[in, ptr[in, void]]
    BlkFreeTblIx    CPU_SIZE_T
}

MEM_DYN_POOL {
    PoolSegPtr      ptr[in, MEM_SEG]
    BlkSize         CPU_SIZE_T
    BlkAlign        CPU_SIZE_T
    BlkPaddingAlign CPU_SIZE_T
    BlkFreePtr      ptr[in, void]
    BlkQtyMax       CPU_SIZE_T
    BlkAllocCnt     CPU_SIZE_T
}